# python机制下方法的特殊点

class Person:
    uuid = 1
    s = [1, 2, 3]

    def func(self): pass


a = Person()
b = Person()

print(id(a.uuid), id(b.uuid))


def func(): pass


print(func)
print(Person.func)
print(a.func)  # 绑定方法，表示要把对象a的数据传递给func
print(a)

# 绑定方法与非绑定方法
# 凡是类中的方法和函数，都是绑定给对象使用的；
#
# 　　　　2.绑定方法都有自动传值的功能。传递进去的值，就是对象本身。
#
# 　　　　3.如果类想调用绑定方法，就必须遵循函数的参数规则，有几个参数，就必须传递几个参数


# 既然类中的方法，默认都是绑定给对象使用，那么，我们要采取一点措施，将类中的绑定方法解除对象绑定关系，进而绑定到类上。
# 在python中，引入了@classmethod方法，将类中的方法绑定到类身上


# 从上述结果可以看出，我们加上了一个装饰器，将类中绑定给对象的方法，绑定到类身上了。我们之前分析过，如果一个方法绑定到谁身上，
# 那么在调用该函数的时候，将自动将该调用者当作第一个参数传递到函数中。但是，绑定到类的方法与绑定到对象方法有一点点不同
# 当对象在调用类的绑定方法时，也会默认把类当作参数传递进去


# 从上面的输出结果，我们可以看出，使用了@staticmethod装饰了一个函数，
# 那么这个函数跟普通函数没有什么区别。既然是普通函数，那么就遵从函数参数传递规则，有几个参数就传递几个参数

# 原来这就是classmethod和staticmethod的区别

